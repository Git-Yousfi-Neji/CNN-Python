# -*- coding: utf-8 -*-
"""traffic_sign_classification_TESTING_CODE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sJaBnWYd1aEj66JBOqDYRzZUVdgo3wuo

# **Connecting to drive**

---
"""

from google.colab import drive
drive.mount("/content/drive/",force_remount=False)

"""# **Importing libraries**

---


"""

import numpy as np
import pandas as pd
import cv2
import os
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from keras.models import load_model
from PIL import Image
from random import choice
from google.colab.patches import cv2_imshow

"""# **Importing the model**

---


"""

model_path = 'drive/My Drive/Colab Notebooks/traffic signs python/traffic_sign/traffic_sign_model.h5'
model = load_model(model_path)
model.summary()

def grayscale(img):
    img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    return img
def equalize(img):
    img =cv2.equalizeHist(img)
    return img
def preprocessing(img):
    img = grayscale(img)
    img = equalize(img)
    img = img/255
    return img

data = pd.read_csv('drive/My Drive/Colab Notebooks/traffic signs python/traffic_sign/labels.csv')
images_path = 'drive/My Drive/Colab Notebooks/traffic signs python/test.jpg'
#print(data.head(5))
###############
#img_test = cv2.imread('drive/My Drive/Colab Notebooks/traffic signs python/traffic_sign/myData/0/0_10000_1577671998.6491628.png')
img_test = cv2.imread(images_path)
img = cv2.resize(img_test,(32,32))
print('img shape0',img.shape)
img = np.array(img)
img = preprocessing(img)
img = img.reshape(1, 32, 32, 1)
print('img shape',img.shape)
#img = img.reshape(1, 32, 32, 1)
#img = cv2.resize(img_test,(32,32))
print(img.shape)

print('predecting..')
pr=  model.predict(img)
lis = list(pr[0])
print(lis)
print([round(i) for i in lis])
###############
"""
classId = list(data['ClassId'])
labels = list(data['Name'])
classId_classNo = dict(list(zip(classId,labels)))
#list_images = os.listdir(images_path)
images = list()
for index in range(len(list_images)):
    images.append(cv2.imread(images_path + '/' + list_images[index]))

images = list(map(np.asarray,images))
images = [cv2.resize(image,(32,32)) for image in images]
images = list(map(preprocessing,images))
plt.imshow(images[5])
plt.show()
images = [image.reshape(1,32,32,1) for image in images]



pr=  model.predict(img)
lis = list(pr[0])
print([round(i) for i in lis])
"""

"""# **Animation**

---


"""

def animate(i, data1, data2, line1, line2):
    temp1 = data1.iloc[:int(i+1)]
    temp2 = data2.iloc[:int(i+1)]

    line1.set_data(temp1.index, temp1.value)
    line2.set_data(temp2.index, temp2.value)

    return (line1, line2)


def create_loss_animation(model_type, data1, data2):
    fig = plt.figure()
    plt.title(f'Loss on Train & Test', fontsize=25)
    plt.xlabel('Epoch', fontsize=20)
    plt.ylabel('Loss MSE for Sx-Sy & Sxy', fontsize=20)
    plt.xlim(min(data1.index.min(), data2.index.min()), max(data1.index.max(), data2.index.max()))
    plt.ylim(min(data1.value.min(), data2.value.min()), max(data1.value.max(), data2.value.max()))

    l1, = plt.plot([], [], 'o-', label='Train Loss', color='b', markevery=[-1])
    l2, = plt.plot([], [], 'o-', label='Test Loss', color='r', markevery=[-1])
    plt.legend(loc='center right', fontsize='xx-large')

    Writer = animation.writers['ffmpeg']
    writer = Writer(fps=5, bitrate=1800)

    ani = matplotlib.animation.FuncAnimation(fig, animate, fargs=(data1, data2, l1, l2), repeat=True, interval=1000, repeat_delay=1000)
    ani.save(f'{model_type}.mp4', writer=writer)

# create datasets
x = np.linspace(0,150,50)
y1 = 41*np.exp(-x/20)
y2 = 35*np.exp(-x/50)

my_data_number_1 = pd.DataFrame({'x':x, 'value':y1}).set_index('x')
my_data_number_2 = pd.DataFrame({'x':x, 'value':y2}).set_index('x')

create_loss_animation('test', my_data_number_1, my_data_number_2)