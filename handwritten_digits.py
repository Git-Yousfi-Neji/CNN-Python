# -*- coding: utf-8 -*-
"""handwritten_digits.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1idRwgwhOr-3SKyK88gvS28mEZ-UnlY_W
"""

from google.colab import drive
drive.mount('/content/drive/')

# import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense,Dropout
from keras.utils import to_categorical

# load the datasets for TRINING
datasets_train = pd.read_csv('/content/drive/My Drive/Colab Notebooks/handwritten_train_datasets.csv')

x_train = datasets_train.loc[:,'1x1':]
y_train = datasets_train['label']

x_train = np.reshape(x_train,(-1, 28*28))
x_train /=255
print(x_train.head(10))

# load the datasets fot TESTING
datasets_test = pd.read_csv('/content/drive/My Drive/Colab Notebooks/handwritten_test_datasets.csv')

x_test = datasets_test.loc[:,'1x1':]
y_test = datasets_test['label']

x_test = np.reshape(x_test,(-1,784))
x_test /=255
print(x_test.head(10))

# defining the keras model
model = Sequential()
# input layer
model.add(Dense(1024,input_shape=(784,),activation='relu'))
model.add(Dense(128, activation='tanh'))
model.add(Dropout(rate=0.05))
model.add(Dense(64, activation='relu'))
model.add(Dense(10,activation='softmax'))

# compiling the model
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

# fitting the model
history = model.fit(x=x_train,y=to_categorical(y_train),batch_size=100,epochs=5,shuffle=True,use_multiprocessing=True)

# Evaluate the loss and accuracy of the model
loss,accuracy = model.evaluate(x=x_train,y=to_categorical(y_train),batch_size=100)
print(f'\nloss: {loss} \naccuracy: {accuracy} ')
model.save('/content/drive/My Drive/Colab Notebooks/handwritten_model.pb')
print ('model saved successfully!')

# Make predictions
v=x_test.loc[2545,:]
a=np.reshape(np.asarray(v),(28,28))
plt.imshow(a)
plt.show()
predictions = model.predict(x=np.asarray(v).reshape((-1,784)))
print(np.round(predictions))

# plot accuracy
plt.xlim(0,1000)
plt.plot(history.history['accuracy'],'r-')
plt.title('accuracy with epochs')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend(['train','test'],loc='upper right')
plt.show()

# plot loss
plt.plot(history.history['loss'],'r-')
plt.title('loss with epochs')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend(['train','test'],loc='upper right')
plt.show()